using System.Net;
using Core.Interfaces;
using Microsoft.AspNetCore.Mvc;
using VoidMail.DTos;
using VoidMail.Helpers;

namespace VoidMail.Controllers;

/// <summary>
/// MailController
/// </summary>
[ApiController]
[Route("/[controller]")]
public class MailController(IMailService mailService, IWebHostEnvironment webHostEnvironment)
    : ControllerBase
{
    /// <summary>
    /// This code was Generated by Google Gemini,
    /// Sends an email using Azure Communication Services.
    /// </summary>
    /// <param name="emailRequest">The email request details including recipient, subject, and body.</param>
    /// <remarks>
    /// Sample request:
    ///
    ///     POST /Mail/send
    ///     {
    ///        "to": "recipient@example.com",
    ///        "subject": "Test Email Subject",
    ///        "plainTextBody": "Hello world via email.",
    ///        "htmlBody": "&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello world via email.&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"
    ///     }
    ///
    /// </remarks>
    /// <returns>An IResult indicating the outcome of the email sending operation.</returns>
    [HttpPost("send")]
    [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
    [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status500InternalServerError)]
    public async Task<IResult> SendEmail([FromBody] EmailDto emailRequest)
    {
        // Validate the request model
        if (!ModelState.IsValid)
        {
            // Return a validation problem response with the model state errors
            return ApiResponseHelper.ValidationProblem(
                ModelState
                    .Where(x => x.Value?.Errors.Any() ?? false)
                    .ToDictionary(
                        kvp => kvp.Key,
                        kvp => kvp.Value?.Errors.Select(e => e.ErrorMessage).ToArray() ?? []
                    )
            );
        }

        try
        {
            // Attempt to send the email using the MailService
            var success = await mailService.SendEmailEventAsync(
                emailRequest.To,
                emailRequest.Subject,
                emailRequest.HtmlBody,
                emailRequest.PlainTextBody
            );

            // Check if the email was sent successfully
            if (success)
            {
                return ApiResponseHelper.Success("Email sent successfully.");
            }

            // The MailService should log specific errors.
            // This endpoint returns a generic server error if the service indicates failure.
            return ApiResponseHelper.Problem(
                "Failed to send email. Please check service logs for details.",
                HttpStatusCode.InternalServerError
            );
        }
        catch (Exception ex)
        {
            // Log the exception (ex.ToString()) in a real application
            return ApiResponseHelper.Problem(ex, webHostEnvironment.IsDevelopment());
        }
    }
}
